### browser_open:

control stateful chromium browser using playwright
use with url argument to open a new page
all browser tools return simplified DOM with unique selectors
once page is opened use browser_do tool to interact.

```json
{
  "thoughts": ["I need to send..."],
  "reflection": ["When sending, I need to check if the form is valid..."],
  "tool_name": "browser_open",
  "tool_args": {
    "url": "https://www.example.com"
  }
}
```

### browser_do:

use to fill forms press keys click buttons execute javascript
arguments are optional
fill argument is array of objects with selector and text
press argument is array of keys to be pressed in order - Enter, Escape...
click argument is an array of selectors clicked in order
execute argument is a string of javascript executed
always prefer clicking on <a> or <button> tags first
confirm fields with Enter or find submit button
consents and popups may block page, close them
only use selectors mentioned in last browser response
do not repeat same steps if do not work! find ways around problems
```json
{
  "observations": [
    "This website is a login page.",
    "The filter button is at the top right corner of the page.",
    "The filter button is a button with the text 'Filter'.",
    "The filter button has a data-uid attribute of '12l'.",
    "The username input field has a data-uid attribute of '14vs'.",
    "The password input field has a data-uid attribute of '14vs'.",
    "The remember me checkbox has a data-uid attribute of '19c'.",
    "The submit button has a data-uid attribute of '65d'.",
  ],
  "thoughts": [
    "Login required...",
    "I will fill username, password, click remember me and submit."
  ],
  "reflection": [
    "I need to fill the form with the correct username and password.",
    "I need to click the remember me checkbox.",
    "I need to click the submit button."
  ],
  "tool_name": "browser_do",
  "tool_args": {
    "fill": [
      {
        "selector": "12l",
        "text": "root"
      },
      {
        "selector": "14vs",
        "text": "toor"
      }
    ],
    "click": ["19c", "65d"]
  }
}
```

```json
{
  "observations": [
    "This website is a search page.",
    "The search box has a data-uid attribute of '98d'.",
    "The search box is a text input field with the placeholder 'Search...'.",
    "The search box has a data-uid attribute of '98d'.",
    "The search box is a text input field with the placeholder 'Search...'.",
  ],
  "thoughts": [
    "Search for...",
    "I will fill search box and press Enter."
  ],
  "reflection": [
    "I need to fill the search box with the correct search query.",
    "I need to press Enter."
  ],
  "tool_name": "browser_do",
  "tool_args": {
    "fill": [
      {
        "selector": "98d",
        "text": "example"
      }
    ],
    "press": ["Enter"]
  }
}
```

```json
{
  "observations": [
    "This website is a search page.",
    "The search box has a data-uid attribute of '98d'.",
    "The search box is a text input field with the placeholder 'Search...'.",
    "The search box has a data-uid attribute of '98d'.",
    "The search box is a text input field with the placeholder 'Search...'.",
  ],
  "thoughts": [
    "Standard interaction not possible, I need to execute custom code..."
  ],
  "reflection": [
    "I need to execute the custom code.",
    "I need to execute the custom code."
  ],
  "tool_name": "browser_do",
  "tool_args": {
    "execute": "const elem = document.querySelector('[data-uid=\"4z\"]'); elem.click();"
  }
}
```
